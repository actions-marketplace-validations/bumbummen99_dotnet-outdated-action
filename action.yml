# action.yml
name: 'Dotnet Outdated Extended'
description: 'This action installs the dotnet outdated tool and then attempts to update any NuGet packages that are available.'
branding:
  icon: 'arrow-down-circle'  
  color: 'green'
inputs:
  location:  # id of input
    description: 'Location of the solution, project or folder to run'
    default: ''
    required: true
    type: string
  includes:
    description: 'Comma separated list of values to include in package update analysis'
    default: ''
    required: false
    type: string
  excludes:
    description: 'Comma separated list of values to exclude from package update analysis'
    default: ''
    required: false
    type: string
  extra:
    description: 'Add your own parameters to the command'
    default: ''
    required: false
    type: string
outputs:
  updated: # id of output
    description: 'Were updates required and were they successful?'
    value: ${{ steps.update.outputs.updated }}
runs:  
  using: "composite"
  steps:
    - run: dotnet tool install --global dotnet-outdated-tool
      shell: bash
    - id: update
      run: |
        COMMAND_INCLUDES=""
        for i in $(echo ${{ inputs.includes }} | sed "s/,/ /g"); do
            COMMAND_INCLUDES+="--include $i "
        done

        COMMAND_EXCLUDES=""
        for i in $(echo ${{ inputs.excludes }} | sed "s/,/ /g"); do
            COMMAND_EXCLUDES+="--exclude $i "
        done
        
        $COMMAND_EXTRA=${{ inputs.extra }}

        echo "dotnet outdated $COMMAND_EXTRA --upgrade $COMMAND_INCLUDES $COMMAND_EXCLUDES"

        OUTPUT=`dotnet outdated $COMMAND_EXTRA --upgrade $COMMAND_INCLUDES $COMMAND_EXCLUDES`
        echo "$OUTPUT"

        if [[ $OUTPUT =~ "No outdated dependencies" ]]; then
            echo "::set-output name=updated::false"
        elif [[ $OUTPUT =~ "Errors occurred" ]]; then
            echo "::set-output name=updated::false"
            exit 1
        else
            echo "::set-output name=updated::true"
        fi

      shell: bash
